# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpeckleQGIS
                                 A QGIS plugin
 SpeckleQGIS Description
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Speckle Systems
        email                : alan@speckle.systems
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, Qgis, QgsWkbTypes, QgsMessageLog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .speckle_qgis_dialog import SpeckleQGISDialog
import os.path

from specklepy.api import operations
from specklepy.api.client import SpeckleClient
from specklepy.api.credentials import get_default_account, get_local_accounts
from specklepy.transports.server import ServerTransport
from specklepy.objects import Base
from specklepy.objects.geometry import Point



class SpeckleQGIS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface

        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SpeckleQGIS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SpeckleQGIS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SpeckleQGIS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/speckle_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SpeckleQGIS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&SpeckleQGIS'),
                action)
            self.iface.removeToolBarIcon(action)

    def onAccountSelected(self, ix):
        self.speckle_account = self.speckle_accounts[ix]
        # initialise the client
        self.speckle_client = SpeckleClient(host=self.speckle_account.serverInfo.url)  # or whatever your host is
        # client = SpeckleClient(host="localhost:3000", use_ssl=False) or use local server
        self.speckle_client.authenticate(token=self.speckle_account.token)

        self.iface.messageBar().pushMessage(
            "Speckle", "Authentication success: " + self.speckle_account.userInfo.name + " - " + self.speckle_account.serverInfo.url,
            level=Qgis.Success, duration=1)

    def getSelectedLayerObject(self):
        layers = QgsProject.instance().layerTreeRoot().children()
        selectedLayerIndex = self.dlg.comboBox.currentIndex()
        selectedLayer = layers[selectedLayerIndex].layer()
        fieldnames = [field.name() for field in selectedLayer.fields()]

        objs = []
        # write feature attributes
        for f in selectedLayer.getFeatures():
            b = Base()
            geom = self.extractGeometry(f)
            if(geom != None):
                b['@displayValue'] = geom
            for name in fieldnames:
                b[name.replace("/","_").replace(".","-")] = str(f[name])
            objs.append(b)
        return objs

    def extractGeometry(self, feature):
        geom = feature.geometry()
        geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
        if geom.type() == QgsWkbTypes.PointGeometry:
            # the geometry type can be of single or multi type
            if geomSingleType:
                pt = geom.asPoint()
                print("Point: ", pt)
                return Point(x=pt.x(), y=pt.y())
            else:
                x = geom.asMultiPoint()
                print("MultiPoint: ", x)
        elif geom.type() == QgsWkbTypes.LineGeometry:
            if geomSingleType:
                x = geom.asPolyline()
                print("Line: ", x, "length: ", geom.length())
            else:
                x = geom.asMultiPolyline()
                print("MultiLine: ", x, "length: ", geom.length())
        elif geom.type() == QgsWkbTypes.PolygonGeometry:
            if geomSingleType:
                x = geom.asPolygon()
                print("Polygon: ", x, "Area: ", geom.area())
            else:
                x = geom.asMultiPolygon()
                print("MultiPolygon: ", x, "Area: ", geom.area())
        else:
            print("Unknown or invalid geometry")
        return None

    def onSendButtonClicked(self):
        # here's the data you want to send
        block = Base(data = self.getSelectedLayerObject())
        streamId = self.dlg.streamIdField.text()
        # next create a server transport - this is the vehicle through which you will send and receive
        transport = ServerTransport(client=self.speckle_client, stream_id=streamId)

        # this serialises the block and sends it to the transport
        hash = operations.send(base=block, transports=[transport])

        # you can now create a commit on your stream with this object
        commid_id = self.speckle_client.commit.create(
            stream_id=streamId,
            object_id=hash,
            message="This was sent from QGIS!!",
            source_application="QGIS"
        )

        self.log("Successfully sent data to stream: " + streamId)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        if self.first_start == True:
            self.first_start = False
            self.dlg = SpeckleQGISDialog()

            # Setup events on first load only!
            self.dlg.accountListField.currentIndexChanged.connect(self.onAccountSelected)
            self.dlg.sendButton.clicked.connect(self.onSendButtonClicked)

            try:
                import pydevd
                pydevd.settrace('localhost', port=53100, stdoutToServer=True, stderrToServer=True)
            except:
                self.logToUser('Debugger failed to attach')
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        # Populate the accounts comboBox
        self.speckle_accounts = get_local_accounts()
        self.dlg.accountListField.clear()
        self.dlg.accountListField.addItems([acc.userInfo.name + " - " + acc.serverInfo.url for acc in self.speckle_accounts])


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something when ok is pressed, we don't have an ok button so this is nor required for us
            return

    def logToUser(self, message, level=Qgis.Info, duration=3):
        self.iface.messageBar().pushMessage(
            "Speckle", message,
            level=level, duration=duration)

    def log(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, 'Speckle', level=level)