# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpeckleQGIS
                                 A QGIS plugin
 SpeckleQGIS Description
 Generated by Plugin Builder: https://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Speckle Systems
        email                : alan@speckle.systems
 ***************************************************************************/
"""


import os.path

from speckle.logging import logger

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDockWidget
from qgis.core import Qgis, QgsProject

# Initialize Qt resources from file resources.py
from resources import *

# Import the code for the dialog
from ui.speckle_qgis_dialog import SpeckleQGISDialog

from specklepy.api import operations
from specklepy.api.client import SpeckleClient
from specklepy.api.credentials import Account, get_local_accounts, StreamWrapper
from specklepy.transports.server import ServerTransport
from specklepy.objects import Base

from speckle.logging import *
from speckle.converter.geometry import *
from speckle.converter.layers import convertSelectedLayers, getLayers

from ui.add_stream_modal import AddStreamModalDialog
class SpeckleQGIS:
    """Speckle Connector Plugin for QGIS"""

    dockwidget: QDockWidget = None
    speckle_account: Account = None
    speckle_client: SpeckleClient = None
    add_stream_modal: AddStreamModalDialog = None
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface

        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "SpeckleQGIS_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&SpeckleQGIS")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.pluginIsActive = False
        self.add_stream_modal = AddStreamModalDialog()

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("SpeckleQGIS", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/speckle_qgis/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("SpeckleQGIS"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING FakePlugin"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(self.tr("&SpeckleQGIS"), action)
            self.iface.removeToolBarIcon(action)

    def onAccountSelected(self, ix):
        self.speckle_account = self.speckle_accounts[ix]
        # initialise the client
        self.speckle_client = SpeckleClient(
            host=self.speckle_account.serverInfo.url or ""
        )  # or whatever your host is
        # client = SpeckleClient(host="localhost:3000", use_ssl=False) or use local server
        self.speckle_client.authenticate(token=self.speckle_account.token)

    def onSendButtonClicked(self):
        # creating our parent base object
        project = QgsProject.instance()
        layerTreeRoot = project.layerTreeRoot()
        layers = getLayers(layerTreeRoot, layerTreeRoot)

        selectedLayerNames = [
            item.text() for item in self.dockwidget.layersWidget.selectedItems()
        ]

        base_obj = Base()
        base_obj.layers = convertSelectedLayers(layers, selectedLayerNames)

        # Check if stream id/url is empty
        if not self.dockwidget.streamIdField.text():
            logger.logToUser("Please enter a Stream Url/ID.", Qgis.Warning)
            return
        # Get the stream id/url
        try:
            streamWrapper = StreamWrapper(self.dockwidget.streamIdField.text())
            streamId = streamWrapper.stream_id
        except Exception as error:
            # Not a url, we assume it's an id!
            streamId = self.dockwidget.streamIdField.text()

        # Ensure the stream actually exists
        try:
            self.speckle_client.stream.get(streamId)
        except Exception as error:
            logger.logToUser(str(error), Qgis.Critical)
            return

        # next create a server transport - this is the vehicle through which you will send and receive
        transport = ServerTransport(client=self.speckle_client, stream_id=streamId)

        try:
            # this serialises the block and sends it to the transport
            hash = operations.send(base=base_obj, transports=[transport])
        except Exception as error:
            logger.logToUser("Error sending data", Qgis.Critical)
            return

        try:
            # you can now create a commit on your stream with this object
            self.speckle_client.commit.create(
                stream_id=streamId,
                object_id=hash,
                message="This was sent from QGIS!!",
                source_application="QGIS",
            )
            logger.logToUser("Successfully sent data to stream: " + streamId)
        except:
            logger.logToUser("Error creating commit", Qgis.Critical)
            return

    def populateLayerDropdown(self):
        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()

        # Clear the contents of the comboBox from previous runs
        self.dockwidget.layersWidget.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dockwidget.layersWidget.addItems([layer.name() for layer in layers])

    def populateAccountsDropdown(self):
        # Populate the accounts comboBox
        self.speckle_accounts = get_local_accounts()
        self.dockwidget.accountListField.clear()
        self.dockwidget.accountListField.addItems(
            [
                f"{acc.userInfo.name} - {acc.serverInfo.url}"
                for acc in self.speckle_accounts
            ]
        )

    def populateProjectStreams(self):

        self.dockwidget.streamList.clear()
        self.dockwidget.streamList.addItems([
            f"{stream.name} - {stream.id}" for stream in self.speckle_client.stream.list()
        ])

    def reloadUI(self):
        self.populateAccountsDropdown()
        self.populateLayerDropdown()
        self.populateProjectStreams()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        if not self.pluginIsActive:
            self.pluginIsActive = True
            if self.dockwidget is None:
                self.dockwidget = SpeckleQGISDialog()

            # Setup events on first load only!
            self.dockwidget.accountListField.currentIndexChanged.connect(
                self.onAccountSelected
            )
            self.dockwidget.sendButton.clicked.connect(self.onSendButtonClicked)
            self.dockwidget.reloadButton.clicked.connect(self.reloadUI)
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # Connect streams section events
            self.dockwidget.streams_add_button.clicked.connect(self.onStreamAdd)
            self.dockwidget.streams_remove_button.clicked.connect(self.onStreamRemove)
            self.dockwidget.streams_reload_button.clicked.connect(self.onStreamReload)
            self.dockwidget.streamList.itemSelectionChanged.connect(self.onActiveStreamChanged)


            # Populate the UI dropdowns
            self.populateLayerDropdown()
            self.populateAccountsDropdown()
            self.populateProjectStreams()

            # Setup reload of UI dropdowns when layers change.
            layerRoot = QgsProject.instance()
            layerRoot.layersAdded.connect(self.reloadUI)
            layerRoot.layersRemoved.connect(self.reloadUI)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def onStreamAdd(self, signal):
        logger.log("on stream add")
        self.add_stream_modal.show()
    
    def onStreamRemove(self, signal):
        logger.log("on stream remove")

    def onStreamReload(signal):
        logger.log("on stream reload")
    
    def onActiveStreamChanged(signal):
        logger.log("on active stream changed")
