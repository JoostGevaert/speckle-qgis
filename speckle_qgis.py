# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpeckleQGIS
                                 A QGIS plugin
 SpeckleQGIS Description
 Generated by Plugin Builder: https://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Speckle Systems
        email                : alan@speckle.systems
 ***************************************************************************/
"""


import os.path

from speckle.logging import logger

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QListWidget
from qgis.core import Qgis, QgsProject, QgsRasterLayer

# Initialize Qt resources from file resources.py
from resources import *

# Import the code for the dialog
from ui.speckle_qgis_dialog import SpeckleQGISDialog

from specklepy.api import operations
from specklepy.api.client import SpeckleClient, SpeckleException
from specklepy.api.credentials import Account, get_local_accounts, StreamWrapper, get_default_account
from specklepy.transports.server import ServerTransport
from specklepy.objects import Base
from specklepy.api.models import Stream
from speckle.logging import *
from speckle.converter.geometry import *
from speckle.converter.layers import convertSelectedLayers, getLayers

from ui.add_stream_modal import AddStreamModalDialog
class SpeckleQGIS:
    """Speckle Connector Plugin for QGIS"""

    dockwidget: QDockWidget = None
    add_stream_modal: AddStreamModalDialog = None
    current_streams: [(StreamWrapper, Stream)] = []
    
    active_stream: (StreamWrapper, Stream) = None

    qgis_project: QgsProject

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface

        self.iface = iface
        self.qgis_project = QgsProject().instance()
        self.qgis_project.fileNameChanged.connect(self.reloadUI)
        self.qgis_project.homePathChanged.connect(self.reloadUI)

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "SpeckleQGIS_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&SpeckleQGIS")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.pluginIsActive = False

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("SpeckleQGIS", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/speckle_qgis/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("SpeckleQGIS"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING FakePlugin"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(self.tr("&SpeckleQGIS"), action)
            self.iface.removeToolBarIcon(action)

    def onSendButtonClicked(self):
        # creating our parent base object
        project = QgsProject.instance()
        projectCRS = project.crs()
        layerTreeRoot = project.layerTreeRoot()
        layers = getLayers(layerTreeRoot, layerTreeRoot)

        selectedLayerNames = [
            item.text().replace("(LARGE!) ","") for item in self.dockwidget.layersWidget.selectedItems()
        ]

        base_obj = Base()
        base_obj.layers = convertSelectedLayers(layers, selectedLayerNames, projectCRS, project)

        # Check if stream id/url is empty
        if not self.dockwidget.streamIdField.text():
            logger.logToUser("Please enter a Stream Url/ID.", Qgis.Warning)
            return

        # Get the stream wrapper
        streamWrapper = self.active_stream[0]
        streamId = streamWrapper.stream_id
        client = streamWrapper.get_client()
        # Ensure the stream actually exists
        try:
            client.stream.get(streamId)
        except Exception as error:
            logger.logToUser(str(error), Qgis.Critical)
            return

        # next create a server transport - this is the vehicle through which you will send and receive
        transport = ServerTransport(client=client, stream_id=streamId)

        try:
            # this serialises the block and sends it to the transport
            hash = operations.send(base=base_obj, transports=[transport])
        except Exception as error:
            logger.logToUser("Error sending data", Qgis.Critical)
            return

        message = self.dockwidget.messageInput.text()
        try:
            # you can now create a commit on your stream with this object
            client.commit.create(
                stream_id=streamId,
                object_id=hash,
                branch_name= self.dockwidget.streamBranchDropdown.currentText(),
                message= "Sent objects from QGIS" if len(message) == 0 else message,
                source_application="QGIS",
            )
            logger.logToUser("Successfully sent data to stream: " + streamId)
            self.dockwidget.messageInput.setText("")
        except Exception as e:
            logger.logToUser("Error creating commit", Qgis.Critical)


    def populateLayerDropdown(self):
        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()

        # Clear the contents of the comboBox from previous runs
        self.dockwidget.layersWidget.clear()
        # Populate the comboBox with names of all the loaded layers
        #self.dockwidget.layersWidget.addItems([layer.name() for layer in layers])
        nameDisplay = []
        for layer in layers:
            if isinstance(layer, QgsRasterLayer):
                if layer.width()*layer.height() > 1000000:
                    nameDisplay.append("(LARGE!) " + layer.name())
                else: nameDisplay.append(layer.name())
            else: nameDisplay.append(layer.name())
        self.dockwidget.layersWidget.addItems(nameDisplay)

    def populateProjectStreams(self):
        
        self.dockwidget.streamList.clear()
        self.dockwidget.streamList.addItems([
            f"{stream[1].name} - {stream[1].id}" for stream in self.current_streams
        ])

    def populateActiveStreamBranchDropdown(self):
        logger.log("populating branch from stream")
        self.dockwidget.streamBranchDropdown.clear()
        if(self.active_stream is None):
            return
        self.dockwidget.streamBranchDropdown.addItems([
            f"{branch.name}" for branch in self.active_stream[1].branches.items
        ])

    def reloadUI(self):
        if(self.dockwidget is not None):
            self.active_stream = None
            self.get_project_streams()
            self.populateLayerDropdown()
            self.populateProjectStreams()
            self.dockwidget.streamIdField.clear()
            self.dockwidget.streamBranchDropdown.clear()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        if not self.pluginIsActive:
            self.pluginIsActive = True
            if self.dockwidget is None:
                self.dockwidget = SpeckleQGISDialog()

            # Setup events on first load only!
            self.dockwidget.sendButton.clicked.connect(self.onSendButtonClicked)
            self.dockwidget.reloadButton.clicked.connect(self.reloadUI)
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # Connect streams section events
            self.dockwidget.streams_add_button.clicked.connect(self.onStreamAddButtonClicked)
            self.dockwidget.streams_remove_button.clicked.connect(self.onStreamRemoveButtonClicked)
            self.dockwidget.streamList.itemSelectionChanged.connect(self.onActiveStreamChanged)

            self.get_project_streams()

            # Populate the UI dropdowns
            self.populateLayerDropdown()
            self.populateProjectStreams()

            # Setup reload of UI dropdowns when layers change.
            layerRoot = QgsProject.instance()
            layerRoot.layersAdded.connect(self.reloadUI)
            layerRoot.layersRemoved.connect(self.reloadUI)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def onStreamAddButtonClicked(self):
        logger.log("on stream add")
        self.add_stream_modal = AddStreamModalDialog(None)
        self.add_stream_modal.handleStreamAdd.connect(self.handleStreamAdd)
        self.add_stream_modal.show()
    
    def onStreamRemoveButtonClicked(self):
        logger.log("on stream remove")
        index = self.dockwidget.streamList.currentIndex().row()
        self.current_streams.pop(index)
        self.active_stream = None
        self.dockwidget.streamBranchDropdown.clear()
        self.dockwidget.streamIdField.setText("")

        self.set_project_streams()
        self.populateProjectStreams()

    def onActiveStreamChanged(self):
        logger.log("on active stream changed")
        if(len(self.current_streams) == 0):
            return
        index = self.dockwidget.streamList.currentRow()
        if(index == -1):
            return
        self.active_stream = self.current_streams[index]
        self.dockwidget.streamIdField.setText(self.dockwidget.streamList.currentItem().text())
        self.populateActiveStreamBranchDropdown()

    def handleStreamAdd(self, sw: StreamWrapper):
        logger.log("handling stream addition")
        client = sw.get_client()
        stream = client.stream.get(sw.stream_id)
        self.current_streams.append((sw, stream))
        self.add_stream_modal.handleStreamAdd.disconnect(self.handleStreamAdd)
        self.set_project_streams()
        self.populateProjectStreams()

    # Persist added streams in project
    def set_project_streams(self):
        proj = QgsProject().instance()
        value = ",".join([stream[0].stream_url for stream in self.current_streams])
        proj.writeEntry("speckle-qgis", "project_streams", value)

    def get_project_streams(self):
        proj = QgsProject().instance()
        saved_streams = proj.readEntry("speckle-qgis", "project_streams", "")
        if saved_streams[1] and len(saved_streams[0]) != 0:
            temp = []
            for url in saved_streams[0].split(","):
                try:
                    sw = StreamWrapper(url)
                    stream = sw.get_client().stream.get(sw.stream_id)
                    temp.append((sw,stream))
                except SpeckleException as e:
                    logger.logToUser(e.message, Qgis.Warning)

            self.current_streams = temp

