# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpeckleQGISDialog
                                 A QGIS plugin
 SpeckleQGIS Description
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Speckle Systems
        email                : alan@speckle.systems
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from speckle.converter.layers import getLayers
#from speckle_qgis import SpeckleQGIS
import ui.speckle_qgis_dialog
from qgis.core import Qgis, QgsProject,QgsVectorLayer, QgsRasterLayer, QgsIconUtils 
from specklepy.logging.exceptions import SpeckleException
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt import QtGui
from qgis.PyQt.QtGui import QIcon, QPixmap
from qgis.PyQt.QtWidgets import QListWidgetItem, QAction, QDockWidget, QVBoxLayout, QHBoxLayout, QWidget, QLabel
from qgis.PyQt import QtCore
from qgis.PyQt.QtCore import pyqtSignal, Qt 
from speckle.logging import logger
from specklepy.api.credentials import get_local_accounts

from specklepy.api.wrapper import StreamWrapper

from ui.validation import tryGetStream

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "speckle_qgis_dialog_base.ui")
)

COLOR_HIGHLIGHT = (210,210,210)

SPECKLE_COLOR = (59,130,246)
SPECKLE_COLOR_LIGHT = (69,140,255)
ICON_LOGO = os.path.dirname(os.path.abspath(__file__)) + "/logo-slab-white@0.5x.png"

ICON_SEARCH = os.path.dirname(os.path.abspath(__file__)) + "/magnify.png"

ICON_DELETE = os.path.dirname(os.path.abspath(__file__)) + "/delete.png"
ICON_DELETE_BLUE = os.path.dirname(os.path.abspath(__file__)) + "/delete-blue.png"

ICON_SEND = os.path.dirname(os.path.abspath(__file__)) + "/cube-send.png"
ICON_RECEIVE = os.path.dirname(os.path.abspath(__file__)) + "/cube-receive.png"

ICON_SEND_BLACK = os.path.dirname(os.path.abspath(__file__)) + "/cube-send-black.png"
ICON_RECEIVE_BLACK = os.path.dirname(os.path.abspath(__file__)) + "/cube-receive-black.png"

ICON_SEND_BLUE = os.path.dirname(os.path.abspath(__file__)) + "/cube-send-blue.png"
ICON_RECEIVE_BLUE = os.path.dirname(os.path.abspath(__file__)) + "/cube-receive-blue.png"

class SpeckleQGISDialog(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    streamList: QtWidgets.QComboBox
    sendModeButton: QtWidgets.QPushButton
    receiveModeButton: QtWidgets.QPushButton
    streamBranchDropdown: QtWidgets.QComboBox
    layerSendModeDropdown: QtWidgets.QComboBox
    commitDropdown: QtWidgets.QComboBox
    layersWidget: QtWidgets.QListWidget
    saveLayerSelection: QtWidgets.QPushButton
    runButton: QtWidgets.QPushButton
    link = None
    
    def __init__(self, parent=None):
        """Constructor."""
        super(SpeckleQGISDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.streamBranchDropdown.setMaxCount(100)
        self.commitDropdown.setMaxCount(100)

        self.streams_add_button.setFlat(True)
        self.streams_remove_button.setFlat(True)
        self.saveSurveyPoint.setFlat(True)
        self.saveLayerSelection.setFlat(True)
        self.reloadButton.setFlat(True)
        self.closeButton.setFlat(True)

        # https://stackoverflow.com/questions/67585501/pyqt-how-to-use-hover-in-button-stylesheet
        color = f"color: rgb{str(SPECKLE_COLOR)};"
        backgr_color = f"background-color: rgb{str(SPECKLE_COLOR)};"
        backgr_color_light = f"background-color: rgb{str(SPECKLE_COLOR_LIGHT)};"
        backgr_image_del = f"border-image: url({ICON_DELETE_BLUE});"
        self.streams_add_button.setIcon(QIcon(ICON_SEARCH))
        self.streams_add_button.setMaximumWidth(25)
        self.streams_add_button.setStyleSheet("QPushButton {padding:3px;padding-left:5px;border: none; text-align: left;} QPushButton:hover { " + f"background-color: rgb{str(COLOR_HIGHLIGHT)};" + f"{color}" + " }")
        self.streams_remove_button.setIcon(QIcon(ICON_DELETE))
        self.streams_remove_button.setMaximumWidth(25)
        self.streams_remove_button.setStyleSheet("QPushButton {padding:3px;padding-left:5px;border: none; text-align: left; image-position:right} QPushButton:hover { " + f"background-color: rgb{str(COLOR_HIGHLIGHT)};" + f"{color}" + " }") #+ f"{backgr_image_del}" 

        self.saveLayerSelection.setStyleSheet("QPushButton {text-align: right;} QPushButton:hover { " + f"{color}" + " }")
        self.saveSurveyPoint.setStyleSheet("QPushButton {text-align: right;} QPushButton:hover { " + f"{color}" + " }")
        self.reloadButton.setStyleSheet("QPushButton {text-align: left;} QPushButton:hover { " + f"{color}" + " }")
        self.closeButton.setStyleSheet("QPushButton {text-align: right;} QPushButton:hover { " + f"{color}" + " }")

        exitIcon = QPixmap(ICON_LOGO)
        #scaledExitIcon = exitIcon.scaled(QtCore.QSize(100, 31))
        exitActIcon = QIcon(exitIcon)

        backgr_color = f"background-color: rgb{str(SPECKLE_COLOR)};"
        backgr_color_light = f"background-color: rgb{str(SPECKLE_COLOR_LIGHT)};"

        # create a label 
        text_label = QtWidgets.QPushButton(" for QGIS")
        text_label.setStyleSheet("border: 0px;"
                            "color: white;"
                            f"{backgr_color}"
                            "top-margin: 40 px;"
                            "padding: 10px;"
                            "padding-left: 20px;"
                            "font-size: 15px;"
                            "height: 30px;"
                            "text-align: left;"
                            )
        text_label.setIcon(exitActIcon)
        text_label.setIconSize(QtCore.QSize(300, 93))
        text_label.setMinimumSize(QtCore.QSize(100, 40))
        text_label.setMaximumWidth(200)

        version = ""
        try:
            metadata_file = os.path.dirname(__file__)[:-2] + "metadata.txt"
            with open(metadata_file, "r") as file:
                lines = file.readlines()
                for i, line in enumerate(lines):
                    if "version=" in line: 
                        version = line.replace("version=", "")
                        break
        except: pass 

        version_label = QtWidgets.QPushButton(f"v {version}")
        version_label.setStyleSheet("border: 0px;"
                            "color: white;"
                            f"{backgr_color}"
                            "padding-top: 15px;"
                            "padding-left: 0px;"
                            "margin-left: 0px;"
                            "font-size: 10px;"
                            "height: 30px;"
                            "text-align: left;"
                            )

        widget = QWidget()
        widget.setStyleSheet(f"{backgr_color}")
        connect_box = QHBoxLayout(widget)
        connect_box.addWidget(text_label) #, alignment=Qt.AlignCenter) 
        connect_box.addWidget(version_label) 
        connect_box.setContentsMargins(0, 0, 0, 0)
        self.setTitleBarWidget(widget)

        self.sendModeButton.setStyleSheet("QPushButton {padding: 10px; border: 0px; " + f"color: rgb{str(SPECKLE_COLOR)};"+ "} QPushButton:hover { "  + "}" ) 
        self.sendModeButton.setIcon(QIcon(ICON_SEND_BLUE))
        
        self.receiveModeButton.setFlat(True)
        self.receiveModeButton.setStyleSheet("QPushButton {padding: 10px; border: 0px;}"+ "QPushButton:hover { "  + f"background-color: rgb{str(COLOR_HIGHLIGHT)};" + "}" ) 
        self.receiveModeButton.setIcon(QIcon(ICON_RECEIVE_BLACK))

        self.runButton.setStyleSheet("QPushButton {color: white;border: 0px;border-radius: 17px;padding: 10px;"+ f"{backgr_color}" + "} QPushButton:hover { "+ f"{backgr_color_light}" + " }")
        #self.runButton.setGeometry(0, 0, 150, 30)
        self.runButton.setMaximumWidth(200)
        self.runButton.setIcon(QIcon(ICON_SEND))

    def clearDropdown(self):
        #self.streamIdField.clear()
        self.streamBranchDropdown.clear()
        self.commitDropdown.clear()
        #self.layerSendModeDropdown.clear()

    def reloadDialogUI(self, plugin):

        self.clearDropdown()
        self.populateUI(plugin) 
        self.enableElements(plugin)

        

    def run(self, plugin): 
        # Setup events on first load only!
        self.setupOnFirstLoad(plugin)
        # Connect streams section events
        self.completeStreamSection(plugin)
        # Populate the UI dropdowns
        self.populateUI(plugin) 

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def setupOnFirstLoad(self, plugin):
        self.runButton.clicked.connect(plugin.onRunButtonClicked)
        
        self.streams_add_button.clicked.connect( plugin.onStreamAddButtonClicked )
        self.reloadButton.clicked.connect(plugin.reloadUI)
        self.closeButton.clicked.connect(plugin.onClosePlugin)
        self.saveSurveyPoint.clicked.connect(plugin.set_survey_point)
        self.saveLayerSelection.clicked.connect(lambda: self.populateLayerDropdown(plugin))
        self.sendModeButton.clicked.connect(lambda: self.setSendMode(plugin))
        self.layerSendModeDropdown.currentIndexChanged.connect( lambda: self.layerSendModeChange(plugin) )
        self.receiveModeButton.clicked.connect(lambda: self.setReceiveMode(plugin))

        self.streamBranchDropdown.currentIndexChanged.connect( lambda: self.runBtnStatusChanged(plugin) )
        self.commitDropdown.currentIndexChanged.connect( lambda: self.runBtnStatusChanged(plugin) )

        self.closingPlugin.connect(plugin.onClosePlugin)
        return 

    def setSendMode(self, plugin):
        plugin.btnAction = 0 # send 
        color = f"color: rgb{str(SPECKLE_COLOR)};"
        self.sendModeButton.setStyleSheet("border: 0px;"
                                    f"color: rgb{str(SPECKLE_COLOR)};"
                                    "padding: 10px;")
        self.sendModeButton.setIcon(QIcon(ICON_SEND_BLUE))
        self.sendModeButton.setFlat(False)
        self.receiveModeButton.setFlat(True)
        self.receiveModeButton.setStyleSheet("QPushButton {border: 0px; color: black; padding: 10px; } QPushButton:hover { " + f"background-color: rgb{str(COLOR_HIGHLIGHT)};" +  " };")
        self.receiveModeButton.setIcon(QIcon(ICON_RECEIVE_BLACK))
        #self.receiveModeButton.setFlat(True)
        self.runButton.setProperty("text", " SEND")
        self.runButton.setIcon(QIcon(ICON_SEND))

        # enable sections only if in "saved streams" mode 
        if self.layerSendModeDropdown.currentIndex() == 1: self.layersWidget.setEnabled(True)
        if self.layerSendModeDropdown.currentIndex() == 1: self.saveLayerSelection.setEnabled(True)
        self.messageInput.setEnabled(True)
        self.layerSendModeDropdown.setEnabled(True)

        self.runBtnStatusChanged(plugin)
        return
    
    def setReceiveMode(self, plugin):
        plugin.btnAction = 1 # receive 
        color = f"color: rgb{str(SPECKLE_COLOR)};"
        self.receiveModeButton.setStyleSheet("border: 0px;"
                                    f"color: rgb{str(SPECKLE_COLOR)};"
                                    "padding: 10px;")
        self.sendModeButton.setIcon(QIcon(ICON_SEND_BLACK))
        self.sendModeButton.setStyleSheet("QPushButton {border: 0px; color: black; padding: 10px;} QPushButton:hover { " + f"background-color: rgb{str(COLOR_HIGHLIGHT)};"  + " };")
        self.receiveModeButton.setIcon(QIcon(ICON_RECEIVE_BLUE))
        self.sendModeButton.setFlat(True)
        self.receiveModeButton.setFlat(False)
        #self.sendModeButton.setFlat(True)
        self.runButton.setProperty("text", " RECEIVE")
        self.runButton.setIcon(QIcon(ICON_RECEIVE))
        #self.layerSendModeChange(plugin, 1)
        self.layersWidget.setEnabled(False)
        self.messageInput.setEnabled(False)
        self.saveLayerSelection.setEnabled(False)
        self.layerSendModeDropdown.setEnabled(False)

        self.runBtnStatusChanged(plugin)
        return

    def completeStreamSection(self, plugin):
        self.streams_remove_button.clicked.connect( lambda: self.onStreamRemoveButtonClicked(plugin) )
        self.streamList.currentIndexChanged.connect( lambda: self.onActiveStreamChanged(plugin) )
        self.streamBranchDropdown.currentIndexChanged.connect( lambda: self.populateActiveCommitDropdown(plugin) )
        return

    def populateUI(self, plugin):
        self.populateLayerSendModeDropdown()
        self.populateLayerDropdown(plugin, False)
        #items = [self.layersWidget.item(x).text() for x in range(self.layersWidget.count())]
        self.populateProjectStreams(plugin)
        self.populateSurveyPoint(plugin)

        self.runBtnStatusChanged(plugin)
        self.runButton.setEnabled(False) 
  
    def runBtnStatusChanged(self, plugin):
        commitStr = str(self.commitDropdown.currentText())
        branchStr = str(self.streamBranchDropdown.currentText())

        if plugin.btnAction == 1: # on receive
            if commitStr == "": 
                self.runButton.setEnabled(False) 
            else: 
                self.runButton.setEnabled(True) 
        
        if plugin.btnAction == 0: # on send 
            if branchStr == "": 
                self.runButton.setEnabled(False) 
            elif branchStr != "" and self.layerSendModeDropdown.currentIndex() == 1 and len(plugin.current_layers) == 0: # saved layers; but the list is empty 
                self.runButton.setEnabled(False)
            else:
                self.runButton.setEnabled(True)
            

    def layerSendModeChange(self, plugin, runMode = None):

        if self.layerSendModeDropdown.currentIndex() == 0 or runMode == 1: # by manual selection OR receive mode
            self.current_layers = []
            self.layersWidget.setEnabled(False)
            self.saveLayerSelection.setEnabled(False)
            
        elif self.layerSendModeDropdown.currentIndex() == 1 and (runMode == 0 or runMode is None): # by saved AND when Send mode
            self.layersWidget.setEnabled(True)
            self.saveLayerSelection.setEnabled(True)
        
        branchStr = str(self.streamBranchDropdown.currentText())
        if self.layerSendModeDropdown.currentIndex() == 0:
            if branchStr == "": self.runButton.setEnabled(False) # by manual selection
            else: self.runButton.setEnabled(True) # by manual selection
        elif self.layerSendModeDropdown.currentIndex() == 1: self.runBtnStatusChanged(plugin) # by saved


    def populateLayerDropdown(self, plugin, bySelection: bool = True):
        
        if not self: return
        from ui.project_vars import set_project_layer_selection, get_project_layer_selection
        
        self.layersWidget.clear()
        nameDisplay = [] 
        project = QgsProject.instance()

        if bySelection is False: # read from project data 
            #get_project_layer_selection(plugin)
            all_layers_ids = [l.id() for l in project.mapLayers().values()]
            for layer_tuple in plugin.current_layers:
                if layer_tuple[1].id() in all_layers_ids: 
                    listItem = self.fillLayerList(layer_tuple[1]) 
                self.layersWidget.addItem(listItem)

        if bySelection is True: # read selected layers 
            # Fetch selected layers
            #layerTreeRoot = project.layerTreeRoot()
            plugin.current_layers = []
            layers = getLayers(plugin, bySelection) # List[QgsLayerTreeNode]
            for i, layer in enumerate(layers):
                plugin.current_layers.append((layer.name(), layer)) 
                listItem = self.fillLayerList(layer)
                self.layersWidget.addItem(listItem)

            set_project_layer_selection(plugin)

        self.runBtnStatusChanged(plugin)

    def fillLayerList(self, layer):
        
        icon_xxl = os.path.dirname(os.path.abspath(__file__)) + "/size-xxl.png"
        listItem = QListWidgetItem(layer.name()) 

        if isinstance(layer, QgsRasterLayer) and layer.width()*layer.height() > 1000000:
                listItem.setIcon(QIcon(icon_xxl))
        
        elif isinstance(layer, QgsVectorLayer) and layer.featureCount() > 20000:
                listItem.setIcon(QIcon(icon_xxl))

        else: 
            icon = QgsIconUtils().iconForLayer(layer)
            listItem.setIcon(icon)
        
        newSize = listItem.sizeHint()
        height = listItem.sizeHint().height()
        newSize.setHeight(0.5)
        listItem.setSizeHint(newSize)
        
        return listItem


    def populateSurveyPoint(self, plugin):
        if not self:
            return
        try:
            self.surveyPointLat.clear()
            self.surveyPointLat.setText(str(plugin.lat))
            self.surveyPointLon.clear()
            self.surveyPointLon.setText(str(plugin.lon))
        except: return

    def enableElements(self, plugin):
        self.sendModeButton.setEnabled(plugin.is_setup)
        self.receiveModeButton.setEnabled(plugin.is_setup)
        self.runButton.setEnabled(plugin.is_setup)
        self.streams_add_button.setEnabled(plugin.is_setup)
        if plugin.is_setup is False: self.streams_remove_button.setEnabled(plugin.is_setup) 
        self.streamBranchDropdown.setEnabled(plugin.is_setup)
        self.layerSendModeDropdown.setEnabled(plugin.is_setup)
        self.commitDropdown.setEnabled(plugin.is_setup)
        self.show()

    def populateProjectStreams(self, plugin):
        from ui.project_vars import set_project_streams
        if not self: return
        self.streamList.clear()
        for stream in plugin.current_streams: 
            self.streamList.addItems(
            [f"Stream not accessible - {stream[0].stream_id}" if stream[1] is None or isinstance(stream[1], SpeckleException) else f"{stream[1].name} - {stream[1].id}"]
        )
        if len(plugin.current_streams)==0: self.streamList.addItems([""])
        self.streamList.addItems(["Create New Stream"])
        set_project_streams(plugin)
        index = self.streamList.currentIndex()
        if index == -1: self.streams_remove_button.setEnabled(False)
        else: self.streams_remove_button.setEnabled(True)

        if len(plugin.current_streams)>0: plugin.active_stream = plugin.current_streams[0]

    def onActiveStreamChanged(self, plugin):

        if not self: return
        index = self.streamList.currentIndex()
        if index == len(plugin.current_streams): self.createStream()
        if len(plugin.current_streams) == 0: return
        if index == -1: return

        try: plugin.active_stream = plugin.current_streams[index]
        except: plugin.active_stream = None

        self.populateActiveStreamBranchDropdown(plugin)
        self.populateActiveCommitDropdown(plugin)

    def createStream(self): 
        return 
        
    def createBranch(self): 
        return 

    def populateLayerSendModeDropdown(self):
        if not self: return
        self.layerSendModeDropdown.clear()
        self.layerSendModeDropdown.addItems(
            ["Send selected layers", "Send saved layers"]
        )

    def populateActiveStreamBranchDropdown(self, plugin):
        if not self: return
        if plugin.active_stream is None: return
        self.streamBranchDropdown.clear()
        if isinstance(plugin.active_stream[1], SpeckleException): 
            logger.logToUser("Some streams cannot be accessed", Qgis.Warning)
            return
        elif plugin.active_stream is None or plugin.active_stream[1] is None or plugin.active_stream[1].branches is None:
            return
        self.streamBranchDropdown.addItems(
            [f"{branch.name}" for branch in plugin.active_stream[1].branches.items]
        )
        self.streamBranchDropdown.addItems(["Create New Branch"])

    def populateActiveCommitDropdown(self, plugin):
        if not self: return
        self.commitDropdown.clear()
        if plugin.active_stream is None: return
        branchName = self.streamBranchDropdown.currentText()
        if branchName == "Create New Branch": 
            self.createBranch()
            return
        branch = None
        if isinstance(plugin.active_stream[1], SpeckleException): 
            logger.logToUser("Some streams cannot be accessed", Qgis.Warning)
            return
        elif plugin.active_stream[1]:
            for b in plugin.active_stream[1].branches.items:
                if b.name == branchName:
                    branch = b
                    break
        try:
            self.commitDropdown.addItems(
                [f"{commit.id}"+ " | " + f"{commit.message}" for commit in branch.commits.items]
            )
        except: pass

    def onStreamRemoveButtonClicked(self, plugin):
        from ui.project_vars import set_project_streams
        if not self: return
        index = self.streamList.currentIndex()
        if len(plugin.current_streams) > 0: plugin.current_streams.pop(index)
        plugin.active_stream = None
        self.streamBranchDropdown.clear()
        self.commitDropdown.clear()
        #self.streamIdField.setText("")

        set_project_streams(plugin)
        self.populateProjectStreams(plugin)

