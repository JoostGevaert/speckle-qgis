# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpeckleQGISDialog
                                 A QGIS plugin
 SpeckleQGIS Description
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Speckle Systems
        email                : alan@speckle.systems
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from speckle.converter.layers import getLayers
#from speckle_qgis import SpeckleQGIS
import ui.speckle_qgis_dialog
from qgis.core import QgsProject,QgsVectorLayer, QgsRasterLayer 
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "speckle_qgis_dialog_base.ui")
)

class SpeckleQGISDialog(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    streamList: QtWidgets.QListWidget
    streamIdField: QtWidgets.QLineEdit
    streamBranchDropdown: QtWidgets.QComboBox
    
    def __init__(self, parent=None):
        """Constructor."""
        super(SpeckleQGISDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def setupOnFirstLoad(self, plugin):
        self.sendButton.clicked.connect(plugin.onSendButtonClicked)
        self.receiveButton.clicked.connect(plugin.onReceiveButtonClicked)
        self.reloadButton.clicked.connect(plugin.reloadUI)
        self.saveSurveyPoint.clicked.connect(plugin.set_survey_point)

        self.closingPlugin.connect(plugin.onClosePlugin)
        return 

    def clearDropdown(self):
        self.streamIdField.clear()
        self.streamBranchDropdown.clear()
        self.commitDropdown.clear()

    def completeStreamSection(self, plugin):
        self.streams_remove_button.clicked.connect( lambda: self.onStreamRemoveButtonClicked(plugin) )
        self.streamList.itemSelectionChanged.connect( lambda: self.onActiveStreamChanged(plugin) )
        self.streamBranchDropdown.currentIndexChanged.connect( lambda: self.populateActiveCommitDropdown(plugin) )
        return

    def populateUI(self, plugin):
        self.populateLayerDropdown()
        self.populateProjectStreams(plugin)
        self.populateSurveyPoint(plugin)

    def populateLayerDropdown(self):
        if not self: return
        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()
        
        project = QgsProject.instance()
        layerTreeRoot = project.layerTreeRoot()
        layers = getLayers(layerTreeRoot, layerTreeRoot) # List[QgsLayerTreeNode]
        print(layers)
        # Clear the contents of the comboBox from previous runs
        self.layersWidget.clear()
        # Populate the comboBox with names of all the loaded layers
        #self.dockwidget.layersWidget.addItems([layer.name() for layer in layers])
        
        nameDisplay = [] 
        for i, layer in enumerate(layers):
            layer = layer.layer() #QgsMapLayer
            if isinstance(layer, QgsRasterLayer):
                if layer.width()*layer.height() > 1000000:
                    nameDisplay.append(str(i)+" - "+ layer.name() + " !LARGE!")
                else: nameDisplay.append(str(i)+" - "+ layer.name())
            
            elif isinstance(layer, QgsVectorLayer):
                if layer.featureCount() > 20000:
                    nameDisplay.append(str(i)+" - "+ layer.name() + " !LARGE!")
                else: nameDisplay.append(str(i)+" - "+ layer.name())
            else: nameDisplay.append(str(i)+" - "+ str(layer.name()))
        self.layersWidget.addItems(nameDisplay)

    def populateProjectStreams(self, plugin):
        from ui.project_vars import set_project_streams
        if not self: return
        self.streamList.clear()
        self.streamList.addItems(
            [f"Stream not accessible - {stream[0].stream_id}" if stream[1] is None else f"{stream[1].name} - {stream[1].id}" for stream in plugin.current_streams]
        )
        set_project_streams(plugin)

    def populateSurveyPoint(self, plugin):
        if not self:
            return
        try:
            self.surveyPointLat.clear()
            self.surveyPointLat.setText(str(plugin.lat))
            self.surveyPointLon.clear()
            self.surveyPointLon.setText(str(plugin.lon))
        except: return

    def enableElements(self, plugin):
        self.receiveButton.setEnabled(plugin.is_setup)
        self.sendButton.setEnabled(plugin.is_setup)
        self.streams_add_button.setEnabled(plugin.is_setup)
        self.streams_remove_button.setEnabled(plugin.is_setup)
        self.streamBranchDropdown.setEnabled(plugin.is_setup)
        self.commitDropdown.setEnabled(plugin.is_setup)
        self.show()




    def onActiveStreamChanged(self, plugin):
        print("populateActiveCommitDropdown")
        print(plugin)
        if not self: return
        if len(plugin.current_streams) == 0:
            return
        index = self.streamList.currentRow()
        if index == -1:
            return
        print(plugin)
        print(plugin.active_stream)
        try: plugin.active_stream = plugin.current_streams[index]
        except: plugin.active_stream = None
        self.streamIdField.setText(
            self.streamList.currentItem().text()
        )
        self.populateActiveStreamBranchDropdown(plugin)
        self.populateActiveCommitDropdown(plugin)

    def populateActiveStreamBranchDropdown(self, plugin):
        if not self: return
        self.streamBranchDropdown.clear()
        if plugin.active_stream is None or plugin.active_stream[1] is None or plugin.active_stream[1].branches is None:
            return
        self.streamBranchDropdown.addItems(
            [f"{branch.name}" for branch in plugin.active_stream[1].branches.items]
        )

    def populateActiveCommitDropdown(self, plugin):
        if not self: return
        self.commitDropdown.clear()
        if plugin.active_stream is None:
            return
        branchName = self.streamBranchDropdown.currentText()
        branch = None
        if plugin.active_stream[1]:
            for b in plugin.active_stream[1].branches.items:
                if b.name == branchName:
                    branch = b
                    break
        try:
            self.commitDropdown.addItems(
                [f"{commit.id}"+ " | " + f"{commit.message}" for commit in branch.commits.items]
            )
        except: pass

    def onStreamRemoveButtonClicked(self, plugin):
        from ui.project_vars import set_project_streams
        if not self: return
        index = self.streamList.currentIndex().row()
        #if index == 0: 
        plugin.current_streams.pop(index)
        plugin.active_stream = None
        self.streamBranchDropdown.clear()
        self.commitDropdown.clear()
        self.streamIdField.setText("")

        set_project_streams(plugin)
        self.populateProjectStreams(plugin)

